name: WSDL to Kong Deployment with soap-converter

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - main

jobs:
  convert-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      #- name: Install soap-converter
      #  run: |
      #    npm install -g soap-converter

      #- name: Convert WSDL to OpenAPI
      #  run: |
      #    soap-converter -i ./wsdl/tgropweb_ROPWebServicesService_ROPRealTimeServicesService_ROPRealTimeServicesService.wsdl \
      #      -t OpenAPI \
      #      -v 3.1 \
      #      -o openapi.yaml

      - name: Install dependencies
        run: |
          npm init -y
          npm install apiconnect-wsdl@1.6.43 xml2js@0.6.2

      - name: Convert WSDL to OpenAPI
        run: |
          node -e "
          const fs = require('fs');
          const apicWsdl = require('apiconnect-wsdl');
          const { parseString } = require('xml2js');

          const wsdlContent = fs.readFileSync('./wsdl/tgropweb_ROPWebServicesService_ROPRealTimeServicesService_ROPRealTimeServicesService.wsdl');

          parseString(wsdlContent, { explicitArray: false, ignoreAttrs: false }, async (err, result) => {
              if (err) throw err;

              // Extract service details with proper namespace handling
              const service = result.definitions.service;
              const serviceName = service.$.name;
              const port = service.port;
              const serverUrl = port['soap:address'].$.location;

              try {
                  const conversion = await.apicWsdl.create(
                      wsdlContent,
                      serviceName,
                      'converted-api',
                      {
                          type: 'wsdl',
                          openapiVersion: '3.0',
                          defaults: {
                              title: serviceName,
                              servers: [{ url: serverUrl }],
                              'x-ibm-configuration': {
                                  cors: { enabled: false }
                              }
                          }
                      }
                  );

                  fs.writeFileSync('openapi.yaml', conversion.openapi);
                  console.log('Conversion successful');
              } catch (e) {
                  console.error('Conversion failed:', e);
                  process.exit(1);
              }
          });"
      # Install Deck using official action
      - name: Setup decK
        uses: kong/setup-deck@v1
        with:
          version: "1.40.2"

      # Convert OpenAPI specs to DecK
      - name: Generate Kong declarative configuration from Spec
        run: deck file openapi2kong --spec ./openapi.yaml --output-file ./kong.yaml --select-tag gitops

      - name: Apply Custom Plugins from File
        run: |
          deck file patch \
            --state kong.yaml \
            --state kong-config/plugins-patch.yaml \
            --selector-selector-match-tags gitops \
            --format yaml \
            --output kong-patched.yaml \
            --yes

          # Replace original config with patched version
          mv kong-patched.yaml kong.yaml

      - name: Validate Kong config
        run: |
          deck validate -s kong.yaml

      - name: Deploy to Kong Gateway
        run: |
          deck gateway sync ./kong.yaml --konnect-addr https://us.api.konghq.com --konnect-token $KONG_KONNECT_TOKEN --konnect-control-plane-name thai-airways-poc --select-tag gitops
        env:
          KONG_KONNECT_TOKEN: ${{ secrets.KONG_KONNECT_TOKEN }}
